<?php

namespace Jad;

use Jad\Exceptions\JadException;
use Jad\Map\EntityMapItem;
use Tobscure\JsonApi\AbstractSerializer;

class Serializer extends AbstractSerializer
{
    const DATE_FORMAT = 'Y-m-d';
    const TIME_FORMAT = 'H:i:s';
    const DATE_TIME_FORMAT = self::DATE_FORMAT . ' ' . self::TIME_FORMAT;

    /**
     * @var EntityMapItem $mapItem;
     */
    protected $mapItem;

    /**
     * Serializer constructor.
     * @param EntityMapItem $mapItem
     */
    public function __construct(EntityMapItem $mapItem)
    {
        $this->mapItem = $mapItem;
    }

    /**
     * @param mixed $entity
     * @return mixed
     * @throws JadException
     */
    public function getId($entity): int
    {
        return $this->getPropertyValue($entity, $this->mapItem->getIdField());
    }

    /**
     * @param mixed $entity
     * @param array|null $fields
     * @return array
     */
    public function getAttributes($entity, array $fields = null)
    {
        $attributes = [];

        foreach($this->mapItem->getClassMeta()->getFieldNames() as $field) {
            if($field === $this->mapItem->getIdField()) {
                continue;
            }
            $value = $this->normalizeValue($this->getPropertyValue($entity, $field));
            $attributes[$field] = $value;
        }

        return $attributes;
    }

    /**
     * @param mixed $model
     * @return string
     */
    public function getType($model)
    {
        return $this->mapItem->getType();
    }

    public function getLinks($entity)
    {
        return parent::getLinks($entity); // TODO: Change the autogenerated stub
    }

    public function getMeta($entity)
    {
        return parent::getMeta($entity); // TODO: Change the autogenerated stub
    }

    public function getRelationship($entity, $name)
    {
        return parent::getRelationship($entity, $name); // TODO: Change the autogenerated stub
    }

    /**
     * @param $entity
     * @param $property
     * @return mixed
     * @throws JadException
     */
    private function getPropertyValue($entity, $property)
    {
        $methodName = 'get' . ucfirst($property);

        if(method_exists($entity, $methodName)) {
            return $entity->$methodName();
        }

        $reflection = new \ReflectionClass($entity);

        if($reflection->hasProperty($property)) {
            $reflectionProperty = $reflection->getProperty($property);
            $reflectionProperty->isPublic();
            $reflectionProperty->setAccessible(true);
            return $reflectionProperty->getValue($entity);
        }

        throw new JadException('Unable to get property "' . $property . '" of ' . $this->mapItem->getType());
    }

    /**
     * @param $value
     * @return string
     */
    private function normalizeValue($value)
    {
        if($value instanceof \DateTime) {
            return $value->format(self::DATE_TIME_FORMAT);
        }

        return $value;
    }
}