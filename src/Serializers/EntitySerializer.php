<?php

namespace Jad\Serializers;

use Jad\Exceptions\JadException;
use Jad\Map\Mapper;
use Jad\Map\MapItem;
use Tobscure\JsonApi\AbstractSerializer;
use Tobscure\JsonApi\Resource;
use Tobscure\JsonApi\Relationship;

class EntitySerializer extends AbstractSerializer
{
    const DATE_FORMAT = 'Y-m-d';
    const TIME_FORMAT = 'H:i:s';
    const DATE_TIME_FORMAT = self::DATE_FORMAT . ' ' . self::TIME_FORMAT;

    /**
     * @var Mapper $mapper
     */
    protected $mapper;

    /**
     * EntitySerializer constructor.
     * @param Mapper $mapper
     * @param $type
     */
    public function __construct(Mapper $mapper, $type)
    {
        $this->mapper = $mapper;
        $this->type = $type;
    }

    /**
     * @return MapItem
     * @throws JadException
     */
    public function getMapItem(): MapItem
    {
        $mapItem = $this->mapper->getMapItem($this->type);

        if(!$mapItem instanceof MapItem) {
            throw new JadException('Could not find map item for type: ' . $this->type);
        }

        return $mapItem;
    }

    /**
     * @param mixed $entity
     * @return mixed
     * @throws JadException
     */
    public function getId($entity): int
    {
        try {
            $this->getPropertyValue($entity, $this->getMapItem()->getIdField());
        } catch (\Exception $e) {
            var_dump($this->type);
            var_dump($e);
            die;
        }

        return $this->getPropertyValue($entity, $this->getMapItem()->getIdField());
    }

    /**
     * @param mixed $entity
     * @param array|null $fields
     * @return array
     */
    public function getAttributes($entity, array $fields = null)
    {
        $attributes = [];

        foreach($this->getMapItem()->getClassMeta()->getFieldNames() as $field) {
            if($field === $this->getMapItem()->getIdField()) {
                continue;
            }
            $value = $this->normalizeValue($this->getPropertyValue($entity, $field));
            $attributes[$field] = $value;
        }

        return $attributes;
    }

    /**
     * @param mixed $model
     * @return string
     */
    public function getType($model)
    {
        return $this->getMapItem()->getType();
    }

    public function getLinks($entity)
    {
        return parent::getLinks($entity); // TODO: Change the autogenerated stub
    }

    public function getMeta($entity)
    {
        return parent::getMeta($entity); // TODO: Change the autogenerated stub
    }

    /**
     * @param mixed $entity
     * @param string $type
     * @return Relationship
     * @throws JadException
     */
    public function getRelationship($entity, $type)
    {
        $type = rtrim($type,'s');
        $types = $type . 's';

        if(!$this->getMapItem()->getClassMeta()->hasAssociation($type)) {
            if(!$this->getMapItem()->getClassMeta()->hasAssociation($types)) {
                throw new JadException('Cannot find relationship/association for fields: ' . $type . '/s');
            }
        }

        $method = 'get' . ucfirst($type);
        $methods = 'get' . ucfirst($types);


        if(!method_exists($entity, $method)) {
            if(!method_exists($entity, $methods)) {
                throw new JadException('Fetching relationship/association, method does not exists: ' . $method . '/s');
            }
        }

        $relationshipEntity = $entity->$method();

        if($this->mapper->hasMapItem($type)) {
            $mapItem = $this->mapper->getMapItem($type);
        } elseif ($this->mapper->hasMapItem($types)) {
            $mapItem = $this->mapper->getMapItem($types);
        } else {
            return null;
        }

        $entityClass = $mapItem->getEntityClass();

        new Relationship();
        var_dump($entityClass);
        die;
        $entityClass = $mapItem->getEntityClass();
        //$MapItem->setClassMeta($this->em->getClassMetadata($entityClass));

        var_dump($mapItem);
        //$MapItem = $this->mapper->getMapItem($type);
        /**
         * $type = $this->requestHandler->getType();
        $MapItem = $this->mapper->getMapItem($type);
        $entityClass = $MapItem->getEntityClass();
        $MapItem->setClassMeta($this->em->getClassMetadata($entityClass));
        $entity = $this->em->getRepository($entityClass)->find($id);
         */

        die;
        $resource = new Resource($relationshipEntity, new self($this->mapper, $type));

        return new Relationship($resource);

        // TODO check single/collection
        return parent::getRelationship($entity, $name); // TODO: Change the autogenerated stub
    }

    /**
     * @param $entity
     * @param $property
     * @return mixed
     * @throws JadException
     */
    private function getPropertyValue($entity, $property)
    {
        $methodName = 'get' . ucfirst($property);

        if(method_exists($entity, $methodName)) {
            return $entity->$methodName();
        }

        $reflection = new \ReflectionClass($entity);

        if($reflection->hasProperty($property)) {
            $reflectionProperty = $reflection->getProperty($property);
            $reflectionProperty->isPublic();
            $reflectionProperty->setAccessible(true);
            return $reflectionProperty->getValue($entity);
        }

        throw new JadException('Unable to get property "' . $property . '" of ' . $this->getMapItem()->getType());
    }

    /**
     * @param $value
     * @return string
     */
    private function normalizeValue($value)
    {
        if($value instanceof \DateTime) {
            return $value->format(self::DATE_TIME_FORMAT);
        }

        return $value;
    }
}